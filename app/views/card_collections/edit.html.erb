<% initialFieldCount = @card_collection.photos.attached? ? @card_collection.photos.size : 0 %>
<%= form_with model: @card_collection, local: true, html: { multipart: true } do |f| %>
  <div>
    <label>自分のPCから写真を投稿する（最大10枚）</label><br>
    <div id="file_fields_container">
      <% if @card_collection.photos.attached? %>
        <% @card_collection.photos.each_with_index do |photo, i| %>
          <div data-index="<%= i %>">
            <!-- 파일 입력은 빈 상태지만, 미리보기로 기존 파일 표시 -->
            <input type="file" name="card_collection[photos][]" id="card_collection_photos_<%= i %>" accept="image/*">
            <div id="preview_<%= i %>">
              <%= image_tag url_for(photo), alt: "Uploaded photo", style: "max-width:200px; display:block;" %>
            </div>
            <!-- 기존에 저장된 설명 -->
            <textarea name="card_collection[contents][]" placeholder="写真の内容" id="content_<%= i %>"><%= @card_collection.contents.respond_to?(:[]) ? @card_collection.contents[i] : @card_collection.contents %></textarea>
            <!-- 삭제 플래그 hidden field -->
            <input type="hidden" name="card_collection[delete_flags][]" id="delete_flag_<%= i %>" value="0">
            <button type="button" class="delete-field-button" data-index="<%= i %>">削除</button>
          </div>
        <% end %>
      <% else %>
        <% initialFieldCount = 0 %>
      <% end %>
    </div>
    <!-- + 버튼만 남김 -->
    <button type="button" id="add_photo_field">+</button>
  </div>

  <div>
    <%= f.label :layout, "レイアウト" %><br>
    <%= f.select :layout, options_for_select(["1R", "1K/1DK", "1LDK/2DK", "2LDK", "3LDK以上"], @card_collection.layout) %>
  </div>

  <div>
    <%= f.label :theme, "テーマ" %><br>
    <%= f.select :theme, options_for_select(["お部屋写真", "収納TIP", "ペット", "プラントテリア", "その他"], @card_collection.theme) %>
  </div>

  <div class="actions">
    <%= f.submit "投稿する", id: "submit_btn" %>
  </div>
<% end %>

<script>
  var maxFields = 10;
  var fieldCount = <%= initialFieldCount %>;
  var container, addButton, submitBtn;

  function createField(index) {
    var div = document.createElement("div");
    div.setAttribute("data-index", index);
    // 삭제 플래그 hidden field 추가
    div.innerHTML =
      '<input type="file" name="card_collection[photos][]" id="card_collection_photos_' + index + '" accept="image/*">' +
      '<div id="preview_' + index + '"></div>' +
      '<textarea name="card_collection[contents][]" placeholder="写真の内容" id="content_' + index + '"></textarea>' +
      '<input type="hidden" name="card_collection[delete_flags][]" id="delete_flag_' + index + '" value="0">' +
      '<button type="button" class="delete-field-button" data-index="' + index + '">削除</button>';
    return div;
  }

  function handleInputChange(e) {
    var input = e.target;
    var index = input.parentNode.getAttribute("data-index");
    var previewDiv = document.getElementById("preview_" + index);
    previewDiv.innerHTML = "";
    
    // 새 파일 선택 시 삭제 플래그를 초기화
    var deleteFlag = document.getElementById("delete_flag_" + index);
    if (deleteFlag) {
      deleteFlag.value = "0";
    }
    
    if (input.files && input.files.length > 0) {
      var file = input.files[0];
      var reader = new FileReader();
      reader.onload = function(e) {
        var img = document.createElement("img");
        img.src = e.target.result;
        img.style.maxWidth = "200px";
        img.style.display = "block";
        previewDiv.appendChild(img);
      };
      reader.readAsDataURL(file);
      updateSubmitButton();
    }
  }


function handleDeleteField(e) {
  e.preventDefault();
  var index = this.getAttribute("data-index");
  var field = container.querySelector('div[data-index="' + index + '"]');
  if (field) {
    // 삭제 플래그 설정 (필요하다면 서버에서 삭제 여부를 확인하기 위해)
    var deleteFlag = document.getElementById("delete_flag_" + index);
    if (deleteFlag) { 
      deleteFlag.value = "1"; 
    }
    // DOM에서 해당 필드를 완전히 제거
    field.parentNode.removeChild(field);
  }
  updateButtons();
  updateSubmitButton();
}

  function handleAddClick(e) {
    e.preventDefault();
    if (fieldCount < maxFields) {
      var newField = createField(fieldCount);
      var fileInput = newField.querySelector('input[type="file"]');
      fileInput.addEventListener("change", handleInputChange);
      var deleteBtn = newField.querySelector(".delete-field-button");
      deleteBtn.addEventListener("click", handleDeleteField);
      container.appendChild(newField);
      fieldCount++;
      updateButtons();
      updateSubmitButton();
      fileInput.click();
    }
  }

function updateButtons() {
  var fields = container.querySelectorAll('div[data-index]');
  var visibleFields = Array.from(fields).filter(function(field) {
    return window.getComputedStyle(field).display !== "none";
  });
  addButton.disabled = (visibleFields.length >= maxFields);
}

  function updateSubmitButton() {
    var allInputs = container.querySelectorAll('input[type="file"][name="card_collection[photos][]"]');
    var attached = Array.from(allInputs).some(function(input) {
      return input.value && input.value.trim() !== "";
    });
    submitBtn.disabled = !attached;
  }

  document.addEventListener("turbolinks:load", function() {
    container = document.getElementById("file_fields_container");
    addButton = document.getElementById("add_photo_field");
    submitBtn = document.getElementById("submit_btn");

    // 서버에서 렌더링된 필드에 대해 이벤트 리스너 등록
    var fields = container.querySelectorAll('div[data-index]');
    if (fields.length > 0) {
      fields.forEach(function(field) {
        var fileInput = field.querySelector('input[type="file"]');
        if (fileInput) {
          fileInput.addEventListener("change", handleInputChange);
        }
        var deleteBtn = field.querySelector(".delete-field-button");
        if (deleteBtn) {
          deleteBtn.addEventListener("click", handleDeleteField);
        }
      });
      fieldCount = fields.length;
    } else {
      // 필드가 없으면 첫 번째 필드를 생성
      var firstField = createField(fieldCount);
      firstField.querySelector('input[type="file"]').addEventListener("change", handleInputChange);
      firstField.querySelector(".delete-field-button").addEventListener("click", handleDeleteField);
      container.appendChild(firstField);
      fieldCount++;
    }
    addButton.addEventListener("click", handleAddClick);
    updateButtons();
    updateSubmitButton();
  });

  document.addEventListener("turbolinks:before-cache", function() {
    if (!container) return;
    addButton.removeEventListener("click", handleAddClick);
    var fileInputs = container.querySelectorAll('input[type="file"][name="card_collection[photos][]"]');
    fileInputs.forEach(function(input) {
      input.removeEventListener("change", handleInputChange);
    });
  });
</script>
