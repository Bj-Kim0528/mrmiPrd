<%= form_with model: @card_collection, local: true, html: { multipart: true } do |f| %>
  <div>
    <label>自分のPCから写真を投稿する（最大10枚）</label><br>
    <div id="file_fields_container">
      <%# 편집 시 기존 파일이나 내용이 있다면 미리 렌더링 (필요에 따라 hidden 필드 등 추가) %>
      <% @card_collection.photos.each_with_index do |photo, index| %>
        <div data-index="<%= index %>">
          <input type="file" name="card_collection[photos][]" id="card_collection_photos_<%= index %>" accept="image/*">
            <div id="preview_<%= index %>">
              <% if photo.present? %>
                <%= image_tag url_for(photo), style: "max-width:200px; display:block;" %>
              <% end %>
            </div>
          <textarea name="card_collection[contents][]" placeholder="写真の内容" id="content_<%= index %>">
            <%= @card_collection.contents[index] %>
          </textarea>
          <button type="button" class="delete-field-button" data-index="<%= index %>">削除</button>
        </div>
      <% end %>
    </div>
    <button type="button" id="add_photo_field">+</button>
  </div>
  <div>
    <%= f.label :layout, "レイアウト" %><br>
    <%= f.select :layout, options_for_select(["1R", "1K/1DK", "1LDK/2DK", "2LDK", "3LDK以上"], @card_collection.layout) %>
  </div>
  <div>
    <%= f.label :theme, "テーマ" %><br>
    <%= f.select :theme, options_for_select(["お部屋写真", "収納TIP", "ペット", "プラントテリア", "その他"], @card_collection.theme) %>
  </div>
  <div class="actions">
    <%= f.submit "投稿する", id: "submit_btn" %>
  </div>
<% end %>

<script>
  var maxFields = 10;
  var fieldCount = 0;
  var container, addButton, submitBtn;

  // 새 파일 입력 필드(div) 생성 (새로 추가하는 경우)
  function createField(index) {
    var div = document.createElement("div");
    div.setAttribute("data-index", index);
    div.innerHTML =
      '<input type="file" name="card_collection[photos][]" id="card_collection_photos_' + index + '" accept="image/*">' +
      '<div id="preview_' + index + '"></div>' +
      '<textarea name="card_collection[contents][]" placeholder="写真の内容" id="content_' + index + '"></textarea>' +
      '<button type="button" class="delete-field-button" data-index="' + index + '">削除</button>';
    return div;
  }

  // 파일 입력 변경 시 미리보기 생성
  function handleInputChange(e) {
    var input = e.target;
    var index = input.parentNode.getAttribute("data-index");
    var previewDiv = document.getElementById("preview_" + index);
    previewDiv.innerHTML = "";
    if (input.files && input.files.length > 0) {
      var file = input.files[0];
      var reader = new FileReader();
      reader.onload = function(e) {
        var img = document.createElement("img");
        img.src = e.target.result;
        img.style.maxWidth = "200px";
        img.style.display = "block";
        previewDiv.appendChild(img);
      };
      reader.readAsDataURL(file);
      updateSubmitButton();
    }
  }

  // 필드 삭제 후 재정렬: 배열의 인덱스가 연속되도록 업데이트
  function reindexFields() {
    var fields = container.querySelectorAll('div[data-index]');
    fieldCount = 0;
    fields.forEach(function(field) {
      field.setAttribute("data-index", fieldCount);
      // 파일 입력 필드 업데이트
      var fileInput = field.querySelector('input[type="file"]');
      fileInput.id = "card_collection_photos_" + fieldCount;
      // textarea 업데이트
      var textarea = field.querySelector('textarea');
      textarea.id = "content_" + fieldCount;
      // 미리보기 영역 업데이트
      var previewDiv = field.querySelector('div[id^="preview_"]');
      if (previewDiv) { previewDiv.id = "preview_" + fieldCount; }
      // 삭제 버튼의 data-index 업데이트
      var deleteBtn = field.querySelector(".delete-field-button");
      if (deleteBtn) { deleteBtn.setAttribute("data-index", fieldCount); }
      fieldCount++;
    });
    updateButtons();
    updateSubmitButton();
  }

  // 삭제 버튼 이벤트: 해당 필드를 삭제 후 재정렬
  function handleDeleteField(e) {
    e.preventDefault();
    var field = this.parentNode;
    field.remove();
    reindexFields();
  }

  // "+" 버튼 클릭 시 새 필드 추가 (최대 개수 체크)
  function handleAddClick(e) {
    e.preventDefault();
    if (fieldCount < maxFields) {
      var newField = createField(fieldCount);
      var fileInput = newField.querySelector('input[type="file"]');
      fileInput.addEventListener("change", handleInputChange);
      var deleteBtn = newField.querySelector(".delete-field-button");
      deleteBtn.addEventListener("click", handleDeleteField);
      container.appendChild(newField);
      fieldCount++;
      updateButtons();
      updateSubmitButton();
      fileInput.click();  // 파일 선택 창 자동 호출
    }
  }

  // 버튼 활성화 업데이트 (필드 개수 최대치 체크)
  function updateButtons() {
    var fields = container.querySelectorAll('div[data-index]');
    addButton.disabled = (fields.length >= maxFields);
  }

  // 제출 버튼 활성화 업데이트: 최소 하나의 파일 선택되어야 함
  function updateSubmitButton() {
    var allInputs = container.querySelectorAll('input[type="file"][name="card_collection[photos][]"]');
    var attached = Array.from(allInputs).some(function(input) {
      return input.value && input.value.trim() !== "";
    });
    submitBtn.disabled = !attached;
  }

  document.addEventListener("turbolinks:load", function() {
    container = document.getElementById("file_fields_container");
    addButton = document.getElementById("add_photo_field");
    submitBtn = document.getElementById("submit_btn");

    // 편집 시 이미 렌더링된 필드가 있다면, fieldCount를 기존 개수로 설정
    var initialFields = container.querySelectorAll('div[data-index]');
    fieldCount = initialFields.length;

    // 기존 필드에 이벤트 추가 (변경, 삭제)
    initialFields.forEach(function(field) {
      var fileInput = field.querySelector('input[type="file"]');
      fileInput.addEventListener("change", handleInputChange);
      var deleteBtn = field.querySelector(".delete-field-button");
      deleteBtn.addEventListener("click", handleDeleteField);
    });

    addButton.addEventListener("click", handleAddClick);
    updateButtons();
    updateSubmitButton();
  });

  document.addEventListener("turbolinks:before-cache", function() {
    if (!container) return;
    addButton.removeEventListener("click", handleAddClick);
    var fileInputs = container.querySelectorAll('input[type="file"][name="card_collection[photos][]"]');
    fileInputs.forEach(function(input) {
      input.removeEventListener("change", handleInputChange);
    });
  });
</script>